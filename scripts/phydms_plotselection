#!python

"""Plots selection inferred for an ExpCM with ``phydms``.

Written by Jesse Bloom."""


import sys
import os
import re
import time
import Bio.Alphabet.IUPAC
import dms_tools.file_io
import phydmslib.file_io
import phydmslib.parsearguments


def ModifiedReadDiffPrefs(infile):
    """Reads differential preferences in format needed by this script.

    Return value is dictionary keyed by integer site numbers, with values
    being dictionaries keyed by each amino-acid and values equal to 
    differential preference for that amino acid."""
    (sites, wts, dpi, pr_lt, pr_gt, rms) = dms_tools.file_io.ReadDiffPrefs(infile)
    diffprefs = {}
    for site in sites:
        diffprefs[int(site)] = dpi[site]
    assert diffprefs and set(diffprefs.values()[0].keys()) == set(Bio.Alphabet.IUPAC.IUPACProtein.letters), "Failed to read diffprefs for all 20 protein characters"
    return diffprefs


def main():
    """Main body of script."""

    # Parse command line arguments
    parser = phydmslib.parsearguments.PhyDMSPlotSelectionParser()
    args = vars(parser.parse_args())
    prog = parser.prog

    # print some basic information
    print('\nBeginning execution of %s in directory %s at time %s\n' % (prog, os.getcwd(), time.asctime()))
    print("%s\n" % phydmslib.file_io.Versions())
    print('Parsed the following command-line arguments:\n%s\n' % '\n'.join(['\t%s = %s' % tup for tup in args.iteritems()]))

    # types of selection and associated information
    selectiontypes = ['diffprefs', 'omega', 'stringency']
    filereaders = {'diffprefs':ModifiedReadDiffPrefs,
                   'omega':phydmslib.file_io.ReadOmegaBySite,
                   'stringency':phydmslib.file_io.ReadStringencyBySite,
                  }

    # read data on selection from input files
    selectiondata = {}
    sites = []
    for stype in selectiontypes:
        fname = '%s_%sbysite.txt' % (args['inprefix'], stype)
        if stype == 'diffprefs' or not args['no%sbysite' % stype]:
            assert os.path.isfile(fname), "Cannot find required file input file: %s" % fname
            selectiondata[stype] = fname
            print("Visualizing %s selection using data from: %s\n" % (stype, fname))
            try:
                selectiondata[stype] = filereaders[stype](fname)
            except:
                sys.stderr.write('\nERROR reading %s selection data from %s\n' % (stype, fname))
                raise
            if not sites:
                sites = selectiondata[stype].keys()
                sites.sort()
                assert sites, "No sites in %s" % fname
                assert len(set(sites)) == len(sites), "Duplicate site numbers in %s" % fname
                assert sites[-1] - sites[0] + 1 == len(sites), "site numbers are not consecutive in %s" % fname
            else:
                assert set(sites) == set(selectiondata[stype].keys()), "site numbers in %s do not match those for other selection types" % fname
        else:
            assert stype != 'diffprefs', "You cannot run this program without specifying %s selection in %s" % (stype, fname)
            print("The visualization will NOT include %s selection" % stype)
            selectiondata[stype] = None
    print("The visualization will include %d sites spanning %d to %d\n" % (len(sites), sites[0], sites[-1]))

    # check on plotfile we will create
    assert os.path.splitext(args['plotfile'])[1].lower() == '.pdf', "plotfile %s does not have extension '.pdf'" % args['plotfile']
    assert (not os.path.dirname(args['plotfile'])) or (os.path.isdir(os.path.dirname(args['plotfile']))), "plotfile name %s includes non-existent directory" % args['plotfile']
    if os.path.isfile(args['plotfile']):
        print("Removing existing plotfile of %s" % args['plotfile'])
        os.remove(args['plotfile'])


    print('Successful completion of %s' % prog)


if __name__ == '__main__':
    main() # run the script
