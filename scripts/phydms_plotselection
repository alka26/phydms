#!python

"""Plots selection inferred for an ExpCM with ``phydms``.

Written by Jesse Bloom."""


import sys
import os
import re
import time
import math
import Bio.Alphabet.IUPAC
import dms_tools.file_io
import dms_tools.weblogo
import phydmslib.file_io
import phydmslib.parsearguments


def ModifiedReadDiffPrefs(infile):
    """Reads differential preferences in format needed by this script.

    Return value is dictionary keyed by integer site numbers, with values
    being dictionaries keyed by each amino-acid and values equal to 
    differential preference for that amino acid."""
    (sites, wts, dpi, pr_lt, pr_gt, rms) = dms_tools.file_io.ReadDiffPrefs(infile)
    diffprefs = {}
    for site in sites:
        diffprefs[int(site)] = dpi[site]
    assert diffprefs and set(diffprefs.values()[0].keys()) == set(Bio.Alphabet.IUPAC.IUPACProtein.letters), "Failed to read diffprefs for all 20 protein characters"
    return diffprefs


def main():
    """Main body of script."""

    # Parse command line arguments
    parser = phydmslib.parsearguments.PhyDMSPlotSelectionParser()
    args = vars(parser.parse_args())
    prog = parser.prog

    # print some basic information
    print('\nBeginning execution of %s in directory %s at time %s\n' % (prog, os.getcwd(), time.asctime()))
    print("%s\n" % phydmslib.file_io.Versions())
    print('Parsed the following command-line arguments:\n%s\n' % '\n'.join(['\t%s = %s' % tup for tup in args.iteritems()]))

    # types of selection and associated information
    selectiontypes = ['diffprefs', 'stringency', 'omega']
    filereaders = {'diffprefs':ModifiedReadDiffPrefs,
                   'omega':phydmslib.file_io.ReadOmegaBySite,
                   'stringency':phydmslib.file_io.ReadStringencyBySite,
                  }
    selectionsymbols = {'omega':'$\omega$', 'stringency':'$\\beta$'}

    # read data on selection from input files
    selectiondata = {}
    sites = []
    for stype in selectiontypes:
        fname = '%s_%sbysite.txt' % (args['inprefix'], stype)
        if stype == 'diffprefs' or not args['no%sbysite' % stype]:
            assert os.path.isfile(fname), "Cannot find required file input file: %s" % fname
            selectiondata[stype] = fname
            print("Visualizing %s selection using data from: %s\n" % (stype, fname))
            try:
                selectiondata[stype] = filereaders[stype](fname)
            except:
                sys.stderr.write('\nERROR reading %s selection data from %s\n' % (stype, fname))
                raise
            if not sites:
                sites = selectiondata[stype].keys()
                sites.sort()
                assert sites, "No sites in %s" % fname
                assert len(set(sites)) == len(sites), "Duplicate site numbers in %s" % fname
                assert sites[-1] - sites[0] + 1 == len(sites), "site numbers are not consecutive in %s" % fname
            else:
                assert set(sites) == set(selectiondata[stype].keys()), "site numbers in %s do not match those for other selection types" % fname
        else:
            assert stype != 'diffprefs', "You cannot run this program without specifying %s selection in %s" % (stype, fname)
            print("The visualization will NOT include %s selection" % stype)
            selectiondata[stype] = None
    print("The visualization will include %d sites spanning %d to %d\n" % (len(sites), sites[0], sites[-1]))

    # check on plotfile we will create
    assert os.path.splitext(args['plotfile'])[1].lower() == '.pdf', "plotfile %s does not have extension '.pdf'" % args['plotfile']
    assert (not os.path.dirname(args['plotfile'])) or (os.path.isdir(os.path.dirname(args['plotfile']))), "plotfile name %s includes non-existent directory" % args['plotfile']
    if os.path.isfile(args['plotfile']):
        print("Removing existing plotfile of %s" % args['plotfile'])
        os.remove(args['plotfile'])

    # determine range on diff prefs
    maxdiffprefheight = max([sum([dpi for dpi in selectiondata['diffprefs'][site].values() if dpi > 0]) for site in sites])
    if maxdiffprefheight < args['diffprefheight']:
        print("The maximum differential preference height is %.2g, which is less than the specified '--diffprefheight' of %.2g. So the extent of the y-axis on the differential preferences logo plot will be %.2g.\n" % (maxdiffprefheight, args['diffprefheight'], args['diffprefheight']))
    elif args['updiffprefheight']:
        newheight = 1.02 * maxdiffprefheight
        print("The maximum differential preference height is %.2g, which exceeds '--diffprefheight' of %.2g. But since we are using '--updiffprefheight', the extent of the y-axis on the differential preferences logo plot will be scaled up to %.2g to accomodate the data.\n" % (maxdiffprefheight, args['diffprefheight'], newheight))
        args['diffprefheight'] = newheight
    else:
        raise ValueError("The maximum differential preference height of %.2g exceeds '--diffprefheight' of %.2g. Either increase '--diffprefheight' or use '--updiffprefheight'." % (maxdiffprefheight, args['diffprefheight']))

    # convert sites to strings, which is needed for plotting
    sites = [str(isite) for isite in sites]
    for stype in selectiontypes:
        if selectiondata[stype]:
            selectiondata[stype] = dict([(str(isite), ivalue) for (isite, ivalue) in selectiondata[stype].items()])

    # make plot
    print("Now creating the plot %s...\n" % args['plotfile'])
    assert not os.path.isfile(args['plotfile']), "plotfile %s already exists" % args['plotfile']
    overlay = []
    fix_limits = {}
    for stype in selectiontypes[1 : ]:
        if selectiondata[stype]:
            prop_d = {}
            for site in sites:
                if selectiondata[stype][site][stype] < 1: # negative value, more negative smaller P
                    prop_d[site] = max(math.log10(args['minP']), math.log10(selectiondata[stype][site]['P']))
                else: # positive value, more positive larger P
                    prop_d[site] = -max(math.log10(args['minP']), math.log10(selectiondata[stype][site]['P']))
            shortname = selectionsymbols[stype]
            longname = '%s $<1 \; \longleftarrow$ $\log_{10} P$ for %s $\longrightarrow \;$ %s $>1$' % (shortname, stype, shortname)
            overlay.append((prop_d, shortname, longname))
            ticklocs = [itick for itick in range(int(math.log10(args['minP'])), 1 - int(math.log10(args['minP'])))]
            ticknames = [-abs(itick) for itick in ticklocs]
            fix_limits[selectionsymbols[stype]] = (ticklocs, ticknames)
    dms_tools.weblogo.LogoPlot(
                sites=sites,
                datatype='diffprefs',
                data=selectiondata['diffprefs'],
                plotfile=args['plotfile'],
                nperline=args['nperline'],
                numberevery=args['numberevery'],
                ydatamax=args['diffprefheight'],
                overlay=overlay,
                fix_limits=fix_limits,
                fixlongname=True,
                overlay_cmap='bwr'
            )
    assert os.path.isfile(args['plotfile']), "Failed to create plotfile %s" % args['plotfile']

    print('Successful completion of %s' % prog)


if __name__ == '__main__':
    main() # run the script
